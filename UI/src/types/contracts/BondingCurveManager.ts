/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface BondingCurveManagerInterface extends utils.Interface {
  functions: {
    "buyTokens(address)": FunctionFragment;
    "createToken(string,string,string,string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellTokens(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawFees()": FunctionFragment;
    "calculateCurvedBuyReturn(address,uint256)": FunctionFragment;
    "calculateCurvedSellReturn(address,uint256)": FunctionFragment;
    "calculatePurchaseReturn(uint256,uint256,uint32,uint256)": FunctionFragment;
    "calculateSaleReturn(uint256,uint256,uint32,uint256)": FunctionFragment;
    "getCurrentTokenPrice(address)": FunctionFragment;
    "getTokenEthBalance(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "tokenList(uint256)": FunctionFragment;
    "tokens(address)": FunctionFragment;
    "uniRouter()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyTokens"
      | "createToken"
      | "renounceOwnership"
      | "sellTokens"
      | "transferOwnership"
      | "withdrawFees"
      | "calculateCurvedBuyReturn"
      | "calculateCurvedSellReturn"
      | "calculatePurchaseReturn"
      | "calculateSaleReturn"
      | "getCurrentTokenPrice"
      | "getTokenEthBalance"
      | "owner"
      | "tokenList"
      | "tokens"
      | "uniRouter"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "buyTokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCurvedBuyReturn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCurvedSellReturn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePurchaseReturn",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSaleReturn",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTokenPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenEthBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokens", values: [string]): string;
  encodeFunctionData(functionFragment: "uniRouter", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCurvedBuyReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCurvedSellReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePurchaseReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSaleReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenEthBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uniRouter", data: BytesLike): Result;

  events: {
    "LiquidityAdded(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenCreated(address,address,string,string,string,string)": EventFragment;
    "TokenOwnershipRenounced(address)": EventFragment;
    "TokensBought(address,address,uint256,uint256,uint256)": EventFragment;
    "TokensSold(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenOwnershipRenounced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensSold"): EventFragment;
}

export interface LiquidityAddedEventObject {
  token: string;
  ethAmount: BigNumber;
  tokenAmount: BigNumber;
}
export type LiquidityAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LiquidityAddedEventObject
>;

export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TokenCreatedEventObject {
  tokenAddress: string;
  creator: string;
  name: string;
  symbol: string;
  logo: string;
  description: string;
}
export type TokenCreatedEvent = TypedEvent<
  [string, string, string, string, string, string],
  TokenCreatedEventObject
>;

export type TokenCreatedEventFilter = TypedEventFilter<TokenCreatedEvent>;

export interface TokenOwnershipRenouncedEventObject {
  token: string;
}
export type TokenOwnershipRenouncedEvent = TypedEvent<
  [string],
  TokenOwnershipRenouncedEventObject
>;

export type TokenOwnershipRenouncedEventFilter =
  TypedEventFilter<TokenOwnershipRenouncedEvent>;

export interface TokensBoughtEventObject {
  token: string;
  buyer: string;
  ethAmount: BigNumber;
  tokenAmount: BigNumber;
  tokenPrice: BigNumber;
}
export type TokensBoughtEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  TokensBoughtEventObject
>;

export type TokensBoughtEventFilter = TypedEventFilter<TokensBoughtEvent>;

export interface TokensSoldEventObject {
  token: string;
  seller: string;
  tokenAmount: BigNumber;
  ethAmount: BigNumber;
  tokenPrice: BigNumber;
}
export type TokensSoldEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  TokensSoldEventObject
>;

export type TokensSoldEventFilter = TypedEventFilter<TokensSoldEvent>;

export interface BondingCurveManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BondingCurveManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyTokens(
      tokenAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    createToken(
      name: string,
      symbol: string,
      logo: string,
      description: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sellTokens(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawFees(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    calculateCurvedBuyReturn(
      tokenAddress: string,
      ethAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateCurvedSellReturn(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculatePurchaseReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSaleReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentTokenPrice(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenEthBalance(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    tokenList(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber] & {
        token: string;
        isListed: boolean;
        ethBalance: BigNumber;
      }
    >;

    uniRouter(overrides?: CallOverrides): Promise<[string]>;
  };

  buyTokens(
    tokenAddress: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  createToken(
    name: string,
    symbol: string,
    logo: string,
    description: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sellTokens(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawFees(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  calculateCurvedBuyReturn(
    tokenAddress: string,
    ethAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateCurvedSellReturn(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePurchaseReturn(
    _supply: BigNumberish,
    _connectorBalance: BigNumberish,
    _connectorWeight: BigNumberish,
    _depositAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSaleReturn(
    _supply: BigNumberish,
    _connectorBalance: BigNumberish,
    _connectorWeight: BigNumberish,
    _sellAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentTokenPrice(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenEthBalance(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  tokenList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokens(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber] & {
      token: string;
      isListed: boolean;
      ethBalance: BigNumber;
    }
  >;

  uniRouter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    buyTokens(tokenAddress: string, overrides?: CallOverrides): Promise<void>;

    createToken(
      name: string,
      symbol: string,
      logo: string,
      description: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellTokens(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFees(overrides?: CallOverrides): Promise<void>;

    calculateCurvedBuyReturn(
      tokenAddress: string,
      ethAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateCurvedSellReturn(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePurchaseReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSaleReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentTokenPrice(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenEthBalance(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    tokenList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber] & {
        token: string;
        isListed: boolean;
        ethBalance: BigNumber;
      }
    >;

    uniRouter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "LiquidityAdded(address,uint256,uint256)"(
      token?: string | null,
      ethAmount?: null,
      tokenAmount?: null
    ): LiquidityAddedEventFilter;
    LiquidityAdded(
      token?: string | null,
      ethAmount?: null,
      tokenAmount?: null
    ): LiquidityAddedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TokenCreated(address,address,string,string,string,string)"(
      tokenAddress?: string | null,
      creator?: string | null,
      name?: null,
      symbol?: null,
      logo?: null,
      description?: null
    ): TokenCreatedEventFilter;
    TokenCreated(
      tokenAddress?: string | null,
      creator?: string | null,
      name?: null,
      symbol?: null,
      logo?: null,
      description?: null
    ): TokenCreatedEventFilter;

    "TokenOwnershipRenounced(address)"(
      token?: string | null
    ): TokenOwnershipRenouncedEventFilter;
    TokenOwnershipRenounced(
      token?: string | null
    ): TokenOwnershipRenouncedEventFilter;

    "TokensBought(address,address,uint256,uint256,uint256)"(
      token?: string | null,
      buyer?: string | null,
      ethAmount?: null,
      tokenAmount?: null,
      tokenPrice?: null
    ): TokensBoughtEventFilter;
    TokensBought(
      token?: string | null,
      buyer?: string | null,
      ethAmount?: null,
      tokenAmount?: null,
      tokenPrice?: null
    ): TokensBoughtEventFilter;

    "TokensSold(address,address,uint256,uint256,uint256)"(
      token?: string | null,
      seller?: string | null,
      tokenAmount?: null,
      ethAmount?: null,
      tokenPrice?: null
    ): TokensSoldEventFilter;
    TokensSold(
      token?: string | null,
      seller?: string | null,
      tokenAmount?: null,
      ethAmount?: null,
      tokenPrice?: null
    ): TokensSoldEventFilter;
  };

  estimateGas: {
    buyTokens(
      tokenAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    createToken(
      name: string,
      symbol: string,
      logo: string,
      description: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sellTokens(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawFees(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    calculateCurvedBuyReturn(
      tokenAddress: string,
      ethAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateCurvedSellReturn(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePurchaseReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSaleReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentTokenPrice(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenEthBalance(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    tokenList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    uniRouter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    buyTokens(
      tokenAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createToken(
      name: string,
      symbol: string,
      logo: string,
      description: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sellTokens(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calculateCurvedBuyReturn(
      tokenAddress: string,
      ethAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateCurvedSellReturn(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePurchaseReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSaleReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentTokenPrice(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenEthBalance(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
